====================================================
Workspace browser interaction with Mercurial Backend
====================================================

This module is the Mercurial backend for PMR2 Workspaces.  While this
was originally depended by pmr2.app, it has been changed to provide a
utility that will create and instantiate the storage backend using the
standardized utility and adapter within PMR2.  While the most efficient
way is to have this adapter provide the data directly, we opt to use
the provided classes instead.

-----
Setup
-----

Before we get started, we need to import the required classes and
extract the test data archive.
::

    >>> import zope.component
    >>> from pmr2.app.workspace.browser import browser
    >>> from pmr2.testing.base import TestRequest
    >>> from plone.z3cform.tests import setup_defaults
    >>> from pmr2.app.workspace.interfaces import *
    >>> from pmr2.app.workspace.content import *

---------------------------------
Adding Mercurial backed workspace
---------------------------------

Once Mercurial is installed, it should have been registered as one of
the backends that can be added inside the workspace creation form.  This
can be checked as so:
::

    >>> request = TestRequest()
    >>> form = browser.WorkspaceStorageCreateForm(
    ...     self.portal.workspace, request)
    >>> result = form()
    >>> 'mercurial' in result
    True

Now the data can be filled out and submitted.
::

    >>> request = TestRequest(form={
    ...     'form.widgets.id': u'foobarbaz',
    ...     'form.widgets.title': u'Foo Bar Baz',
    ...     'form.widgets.description': u'Foo Bar Baz',
    ...     'form.widgets.storage': [u'mercurial'],
    ...     'form.buttons.add': 1,
    ... })
    >>> form = browser.WorkspaceStorageCreateForm(
    ...     self.portal.workspace, request)
    >>> form.update()

The Mercurial workspace should have been created, and it could be
adapted into a usable a MercurialStorage instance.
::

    >>> foobarbaz = self.portal.workspace.foobarbaz
    >>> foobarbaz.title
    u'Foo Bar Baz'
    >>> storage = zope.component.getAdapter(foobarbaz, IStorage)
    >>> list(storage.log('0', 0))
    []

We can test this new empty workspace later by pushing some data to it.

---------
Rendering
---------

Now that the Mercurial archive has been extracted and with its workspace
object created, we can now test the basic rendering of the landing page.
::

    >>> request = TestRequest()
    >>> wkspc = self.portal.workspace.pmr2hgtest
    >>> testpage = browser.WorkspacePage(wkspc, request)
    >>> result = testpage()

Now for a file listing, without any traverse subpaths.
::

    >>> request = TestRequest()
    >>> testpage = browser.FilePage(wkspc, request)
    >>> testpage.update()
    >>> result = testpage()
    >>> label = u'Location: pmr2hgtest @ %s /' % \
    ...     self.pmr2hgtest_revs[-1][:12]
    >>> label in testpage.label
    True
    >>> 'file1' in result
    True
    >>> 'file2' in result
    True
    >>> 'README' in result
    True

Now for a file listing, just traversing down a previous revision, using
a partial revision id.
::

    >>> subpath = [self.pmr2hgtest_revs[7][:6]]
    >>> testpage = self.traverse(wkspc, browser.FilePage, subpath)
    >>> testpage.update()
    >>> result = testpage()
    >>> label = u'Location: pmr2hgtest @ %s /' % \
    ...     self.pmr2hgtest_revs[7][:12]
    >>> label in testpage.label
    True
    >>> 'file1' in result
    True
    >>> 'file2' in result
    True
    >>> 'README' in result
    True
    >>> ('http://nohost/plone/workspace/pmr2hgtest/file/'
    ...  '98a09b3682f1ba24bc9e873fea335cbe6e10e66e/1') in result
    True
    >>> ('http://nohost/plone/workspace/pmr2hgtest/file/'
    ...  '98a09b3682f1ba24bc9e873fea335cbe6e10e66e/README') in result
    True
    >>> '<td>43</td>' in result
    True

Now test the listing of the container that contains import links.
::

    >>> subpath = [self.pmr2hgtest_revs[7], 'ext']
    >>> testpage = self.traverse(wkspc, browser.FilePage, subpath)
    >>> testpage.update()
    >>> result = testpage()
    >>> label = u'Location: pmr2hgtest @ %s / ext' % \
    ...     self.pmr2hgtest_revs[7][:12]
    >>> 'http://models.example.com/w/import1' in result
    True
    >>> 'http://models.example.com/w/import2' in result
    True

Accessing the import links using the file page will trigger a 
redirection.
::

    >>> subpath = [self.pmr2hgtest_revs[7], 'ext', 'import1']
    >>> testpage = self.traverse(wkspc, browser.FilePage, subpath)
    >>> testpage.update()
    'http://.../w/import1/rawfile/4df76eccfe.../'

Try again with a different file and revision the intended redirection
should also be triggered.  As the `__name__` would have been be set
during the acquisition of the form, we will emulate this here also.
::

    >>> subpath = [self.pmr2hgtest_revs[1], 'ext', 'import1', 'if1']
    >>> testpage = self.traverse(wkspc, browser.FilePage, subpath)
    >>> testpage.__name__ = 'file'
    >>> testpage.update()
    'http://.../w/import1/file/ce679be0c0.../if1'

Subdirectories should work.  We use a different repo for this that has
the subdirectories in place, and we do need a proper revision for the
request_subpath.
::

    >>> wkspc = self.portal.workspace.rdfmodel
    >>> subpath = [self.rdfmodel_revs[2], 'component']
    >>> testpage = self.traverse(wkspc, browser.FilePage, subpath)
    >>> testpage.update()
    >>> result = testpage()
    >>> label = u'Location: rdfmodel @ %s / component' % \
    ...     testpage.request['rev'][:12]
    >>> label in testpage.label
    True
    >>> 'module.cellml' in result
    True

Bad revision results in not found.
::

    >>> subpath = ['abcdef1234567890', 'component']
    >>> testpage = self.traverse(wkspc, browser.FilePage, subpath)
    >>> testpage.update()
    Traceback (most recent call last):
    ...
    NotFound: ...
    ...

We also need to test the log viewer.  The entries should be rendered
and the supplied paginated listing should too.
::

    >>> request = TestRequest()
    >>> testpage = browser.WorkspaceLog(wkspc, request)
    >>> testpage.__name__ = 'log'
    >>> testpage.update()
    >>> result = testpage()
    >>> 'http://nohost/plone/workspace/rdfmodel/@@log/b94d170115' in result
    True
    >>> '">(0)</a>' in result
    True


Shortlog viewer should have the links to the file listing.
::

    >>> request = TestRequest()
    >>> testpage = browser.WorkspaceShortlog(wkspc, request)
    >>> testpage.__name__ = 'log'
    >>> testpage.update()
    >>> result = testpage()
    >>> 'http://nohost/plone/workspace/rdfmodel/@@log/b94d170115' in result
    True
    >>> '">(0)</a>' in result
    True
    >>> len([i for i in self.rdfmodel_revs if i in result]) == len(
    ...     self.rdfmodel_revs)
    True

------------------------------
Mercurial Protocol Integration
------------------------------

As the base workspace view has the protocol viewer integrated, we can
generate protocol requests.  Before that, we need to mock up some WSGI
elements that Mercurial expects and uses.
::

    >>> from pmr2.mercurial.tests.util import build_wsgi_request
    >>> context = self.portal.workspace.rdfmodel
    >>> request = build_wsgi_request('workspace_view', {
    ...     'cmd': 'heads',
    ... })
    >>> testpage = browser.WorkspacePageView(context, request)
    >>> testpage.update()
    >>> result = testpage()
    >>> print result
    eef1e9af39a79b2fc47ef978f8e61e853bad54e2

The output is generated from the Mercurial protocol, and in this case
the heads of the underlying repo is returned.

In the case of commands that can return no value, the standard browser
page should never be rendered.
::

    >>> context = self.portal.workspace.rdfmodel
    >>> request = build_wsgi_request('workspace_view', {
    ...     'cmd': 'listkeys',
    ...     'namespace': 'bookmarks',
    ... })
    >>> testpage = browser.WorkspacePageView(context, request)
    >>> testpage.update()
    >>> result = testpage()
    >>> print result

In the case of future commands that we don't support, the anticipated
400 status code should be returned:
::

    >>> context = self.portal.workspace.rdfmodel
    >>> request = build_wsgi_request('workspace_view', {
    ...     'cmd': 'badcmd',
    ... })
    >>> testpage = browser.WorkspacePageView(context, request)
    >>> testpage.update()
    Traceback (most recent call last):
    ...
    BadRequest: ...
    ...

Or even an incomplete protocol request.
::

    >>> context = self.portal.workspace.rdfmodel
    >>> request = build_wsgi_request('workspace_view', {
    ...     'cmd': 'listkeys',
    ... })
    >>> testpage = browser.WorkspacePageView(context, request)
    >>> testpage.update()
    Traceback (most recent call last):
    ...
    BadRequest: ...
    ...

---------------------------
Mercurial Workspace Forking
---------------------------

User workspace will need to be set up correctly in order for this test
to function.  Make sure one is created for the current user.
::

    >>> self.pmr2.createUserWorkspaceContainer('test_user_1_')

Make use of one of the workspace as the context and then activate the
fork button.
::

    >>> simple1 = self.portal.workspace.simple1
    >>> simple1_storage = zope.component.getAdapter(simple1, IStorage)
    >>> request = build_wsgi_request('workspace_fork', {
    ...     'form.buttons.fork': 1,
    ... })
    >>> form = browser.WorkspaceForkForm(simple1, request)
    >>> form.update()

A new workspace within the user's workspace container should be present:
::

    >>> cloned = self.pmr2.getCurrentUserWorkspaceContainer().get('simple1')
    >>> cloned.storage == u'mercurial'
    True

The list of files between both of them should be equal.
::

    >>> cloned_storage = zope.component.getAdapter(cloned, IStorage)
    >>> cloned_storage.files() == simple1_storage.files()
    True
